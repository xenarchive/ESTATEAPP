
generator client {
  provider = "prisma-client-js"
}


datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User{
  id String @id @default(auto()) @map("_id") @db.ObjectId
  email String @unique
  username String @unique
  password String 
  avatar String?
  createdAt DateTime @default(now())
  posts Post[]
  savedPost SavedPost[]
  sentMessages Message[] @relation("SentMessages")
  receivedMessages Message[] @relation("ReceivedMessages")
  chatParticipants ChatParticipant[]
}

model Post {
  id         String      @id @default(auto()) @map("_id") @db.ObjectId
  title      String
  price      Int
  images     String[]
  address    String
  city       String
  bedroom    Int
  bathroom   Int
  latitude   String
  longitude  String
  type       Type
  property   Property
  createdAt  DateTime    @default(now())
  user       User        @relation(fields: [userId], references: [id])
  userId     String      @db.ObjectId
  postDetail PostDetail?
  savedPost SavedPost[]
  
}

enum Type {
  buy
  rent
}

enum Property {
  apartment
  house
  condo
  land
}

model PostDetail {
  id         String  @id @default(auto()) @map("_id") @db.ObjectId
  desc       String
  utilities  String?
  pet        String?
  income     String?
  size       Int?
  school     Int?
  bus        Int?
  restaurant Int?
  post       Post    @relation(fields: [postId], references: [id])
  postId     String  @unique @db.ObjectId
}

 model SavedPost{
  id         String  @id @default(auto()) @map("_id") @db.ObjectId
  user       User    @relation(fields: [userId], references: [id])
  post       Post    @relation(fields: [postId], references: [id])
  userId     String  @db.ObjectId
  postId     String  @db.ObjectId
  createdAt  DateTime @default(now())

  @@unique([userId, postId])
 }

model Chat {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  participants ChatParticipant[]
  messages  Message[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model ChatParticipant {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  user   User   @relation(fields: [userId], references: [id])
  userId String @db.ObjectId
  chat   Chat   @relation(fields: [chatId], references: [id])
  chatId String @db.ObjectId

  @@unique([userId, chatId])
}

model Message {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  content   String
  sender    User     @relation("SentMessages", fields: [senderId], references: [id])
  senderId  String   @db.ObjectId
  receiver  User     @relation("ReceivedMessages", fields: [receiverId], references: [id])
  receiverId String  @db.ObjectId
  chat      Chat     @relation(fields: [chatId], references: [id])
  chatId    String   @db.ObjectId
  createdAt DateTime @default(now())
}